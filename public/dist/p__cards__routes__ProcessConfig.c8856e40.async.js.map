{"version":3,"sources":["src/pages/cards/routes/ProcessConfig.tsx","webpack:///./src/pages/cards/routes/ProcessConfig.less?d8fe"],"names":["_react","_interopRequireWildcard","__webpack_require__","_dva","_reactHookForm","_interopRequireDefault","_FormField","_ProcessConfig","_components","_reactSelect","_EmptyDiv","_umi","Panel","_collapse","default","ProcessesBoard","props","id","match","params","dispatch","useDispatch","_useForm","register","handleSubmit","getValues","watch","errors","setValue","optionFilter","_ref","string","result","data","optionString","label","children","toLowerCase","indexOf","error","console","log","onSubmit","type","payload","body","path_id","useEffect","name","process","activities","values","useSelector","state","processes","loaded","users","list","companies","createElement","className","processBoardContainer","configHeader","style","marginBottom","_button","onClick","router","goBack","ref","defaultValue","onChange","_ref2","value","filterOption","noOptionsMessage","options","map","company","display","flexDirection","cnpj","_ref3","user","ProcessCreator","ProcessComponent","onlyRead","_useState","useState","_useState2","_slicedToArray2","setActivities","changeActivityName","index","newActivities","handleTaskChange","task","taskIndex","tasks","addActivityTask","push","description","is_complete","marginTop","activity","key","header","_input","e","target","length","Task","text","concat","_toConsumableArray2","handleChange","field","newTask","formTask","_ref4","_ref5","due_day","_ref6","module","exports"],"mappings":"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","file":"p__cards__routes__ProcessConfig.c8856e40.async.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Collapse, Spin, Input, Checkbox, Button, Form } from 'antd';\r\nimport { useDispatch, useSelector } from 'dva';\r\nimport useForm from 'react-hook-form';\r\nimport FormField from '../components/FormField/FormField';\r\nimport styles from './ProcessConfig.less';\r\nimport { ConnectState } from '@/models/connect';\r\nimport { ProcessComponent } from '../components';\r\nimport { ActivityInterface } from '@/models/database';\r\nimport Select from 'react-select';\r\nimport EmptyDiv from '../components/EmptyDiv/EmptyDiv';\r\nimport { router } from 'umi';\r\n\r\nconst Panel = Collapse.Panel\r\n\r\ninterface Props {\r\n    match: {\r\n        params: {\r\n            id: number | string;\r\n        }\r\n    }\r\n}\r\n\r\nconst ProcessesBoard = (props: Props) => {\r\n    const { id } = props.match.params\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit, watch, errors, getValues, setValue } = useForm()\r\n\r\n    const optionFilter = ({data},string) => {\r\n        let result\r\n        try {\r\n            const optionString = data.label.props.children[0].props.children\r\n            result = optionString.toLowerCase().indexOf(string.toLowerCase()) >= 0\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        return result\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        if(!id || id == 'new'){\r\n            dispatch({\r\n                type: 'processes/store',\r\n                payload:{\r\n                    body: data\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: 'processes/update',\r\n                payload:{\r\n                    body: data,\r\n                    path_id: [id]\r\n                }\r\n            })\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(id !== 'new'){\r\n            dispatch({\r\n                type: 'processes/show',\r\n                payload: {\r\n                    path_id: [id],\r\n                }\r\n            })\r\n        }        \r\n        dispatch({\r\n            type: 'companies/index',\r\n        })\r\n        dispatch({\r\n            type: 'users/index',\r\n            payload: {},\r\n        })\r\n        register({name: 'activities'})\r\n        register({name: 'company_id'})\r\n        register({name: 'user_id'})\r\n        setValue('activities',process.activities)\r\n    }, [])\r\n    const values = getValues()\r\n    const process = useSelector((state: ConnectState) => state.processes.loaded)    \r\n    const users = useSelector((state:ConnectState) => state.users.list)\r\n    console.log(users,'oi')\r\n    const companies = useSelector((state: ConnectState) => state.companies.list)\r\n    return (\r\n        <div className={styles.processBoardContainer}>\r\n            <div className={styles.configHeader} style={{marginBottom: 16}}>\r\n                <h2>Configurações do processo</h2>\r\n                <div>\r\n                    <Button onClick={() => router.goBack()}>Voltar</Button>\r\n                </div>\r\n            </div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormField>\r\n                    <label>Nome do processo</label>\r\n                    <input name='name' ref={register} defaultValue={process.name} />\r\n                </FormField>\r\n                <FormField>\r\n                    <label>Selecione a empresa</label>\r\n                    <Select onChange={({value}:any) => setValue('company_id',value)} filterOption={optionFilter}  noOptionsMessage={() => 'Nenhuma opção'} options={companies.map((company:CompanyInterface) => ({\r\n                        value: company.id,\r\n                        label: <div style={{display:'flex',flexDirection: 'column'}}><b>{company.name}</b><span>{company.cnpj}</span></div>,\r\n                    }))}/>\r\n                </FormField>\r\n                <FormField>\r\n                    <label>Selecione um usuário</label>\r\n                    <Select onChange={({value}:any) => setValue('user_id',value)}   noOptionsMessage={() => 'Nenhuma opção'} options={users.map((user:UserInterface) => ({\r\n                        value: user.id,\r\n                        label: user.name,\r\n                    }))}/>\r\n                </FormField>\r\n                <FormField>\r\n                    <ProcessCreator defaultValue={process.activities} onChange={(activities) => setValue('activities',activities)}/>\r\n                </FormField>\r\n                <FormField>\r\n                    <label>Preview</label> \r\n                    <ProcessComponent onlyRead process={values} />\r\n                </FormField>\r\n                <FormField>\r\n                    <button type='submit'>Salvar mudanças</button>\r\n                </FormField>\r\n            </form>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProcessesBoard \r\n\r\nconst ProcessCreator = (props) => {\r\n    const { onChange, defaultValue } = props\r\n    const [activities, setActivities] = useState(defaultValue || [])\r\n    const changeActivityName = (value,index) => {\r\n        let newActivities = activities\r\n        newActivities[index].name = value\r\n        setActivities(newActivities)\r\n        onChange(newActivities)\r\n    }\r\n    const handleTaskChange = (task,index,taskIndex) => {\r\n        let newActivities = activities\r\n        newActivities[index].tasks[taskIndex] = task\r\n        setActivities(newActivities)\r\n        onChange(newActivities)\r\n    }\r\n\r\n    const addActivityTask = (index) => {\r\n        let newActivities = activities\r\n        newActivities[index].tasks.push({name: '',description: '',is_complete: false})\r\n        setActivities(newActivities)\r\n        onChange(newActivities)\r\n    }\r\n    \r\n    return (\r\n        <div style={{marginTop: 16}}>\r\n        <Collapse>\r\n                {activities.map((activity:ActivityInterface,index:number) => {\r\n                    console.log(activity,'activity')\r\n                    return <Panel\r\n                        key={index} \r\n                        header={\r\n                            <Input \r\n                                value={activity.name} \r\n                                onChange={(e) => changeActivityName(e.target.value,index)}\r\n                            />\r\n                        }> \r\n                        {activity.tasks.length > 0 ? activity.tasks.map((task,taskIndex) => {\r\n                            return (\r\n                                <Task task={task} onChange={(task) => handleTaskChange(task,index,taskIndex)}/>\r\n                            )\r\n                        }): <EmptyDiv text={'Nenhuma tarefa nessa atividade'}/>}\r\n                        <Button type='primary' onClick={() => addActivityTask(index)}>Adicionar tarefa</Button>\r\n                    </Panel>\r\n                })}                \r\n        </Collapse>\r\n        <Button type='primary' onClick={() => setActivities([...activities,{name: '',tasks: []}])}>Adicionar atividade</Button>\r\n        </div>\r\n    )\r\n}\r\nconst Task = (props) => {\r\n    const {task,onChange} = props\r\n    const handleChange = (field,value) => {\r\n        let newTask = task\r\n        newTask[field] = value\r\n        onChange(newTask)\r\n    }\r\n    return (\r\n        <div className={styles.formTask}>\r\n            <FormField>\r\n                <label>Nome da tarefa</label>\r\n                <Input value={task.name} onChange={({target}) => handleChange('name',target.value)} />\r\n            </FormField>\r\n            <FormField>\r\n                <label>Descrição (opcional)</label>\r\n                <Input value={task.description} onChange={({target}) => handleChange('description',target.value)} />\r\n            </FormField>\r\n            <FormField>\r\n                <label>Dia de vencimento</label>\r\n                <Input value={task.due_day} onChange={({target}) => handleChange('due_day',target.value)} />\r\n            </FormField>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"processBoardContainer\":\"antd-pro-pages-cards-routes-process-config-processBoardContainer\",\"configHeader\":\"antd-pro-pages-cards-routes-process-config-configHeader\",\"formTask\":\"antd-pro-pages-cards-routes-process-config-formTask\"};"],"sourceRoot":""}