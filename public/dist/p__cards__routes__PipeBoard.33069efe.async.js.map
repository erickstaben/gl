{"version":3,"sources":["src/pages/cards/routes/PipeBoard.tsx","webpack:///./src/pages/cards/routes/PipeBoard.less?db4d"],"names":["_react","_interopRequireWildcard","__webpack_require__","_dva","_PipeBoard","_interopRequireDefault","_components","_md","customCompare","l","r","filter","e","i","order","PipeBoard","props","dispatch","useDispatch","id","match","params","useEffect","type","payload","path_id","phases","useSelector","state","pipes","loaded","_useState","useState","_useState2","_slicedToArray2","default","isVisible","toggleModal","_useState3","_useState4","isNewVisible","toggleNewCard","createElement","style","overflowX","className","scrollBar","PipeContainer","pipe_id","CardModal","NewCardModal","onClick","affixButton","MdAdd","module","exports","pipeContainer"],"mappings":"oNACAA,EAAAC,EAAAC,EAAA,SACAC,EAAAD,EAAA,QAEAE,EAAAC,EAAAH,EAAA,SACAI,EAAAJ,EAAA,QAGAK,EAAAL,EAAA,QASMM,EAAgB,SAACC,EAAeC,GACpC,OAAOD,EAAEE,OAAO,SAACC,EAAGC,GAAJ,OAAUH,EAAEG,GAAGC,QAAUF,EAAEE,SAEvCC,EAAY,SAACC,GACjB,IAAMC,GAAW,EAAAd,EAAAe,eACTC,EAAOH,EAAMI,MAAMC,OAAnBF,IACR,EAAAnB,EAAAsB,WAAU,WACRL,GACEM,KAAM,iBACNC,SACEC,SAAUN,WAIhB,IAAMO,GAA2B,EAAAvB,EAAAwB,aAAY,SAACC,GAAD,OAAyBA,EAAMC,MAAMC,OAAOJ,YAAclB,GAXvEuB,GAYC,EAAA/B,EAAAgC,WAAS,GAZVC,GAAA,EAAAC,EAAAC,SAAAJ,EAAA,GAYzBK,EAZyBH,EAAA,GAYdI,EAZcJ,EAAA,GAAAK,GAaM,EAAAtC,EAAAgC,WAAS,GAbfO,GAAA,EAAAL,EAAAC,SAAAG,EAAA,GAazBE,EAbyBD,EAAA,GAaXE,EAbWF,EAAA,GAchC,OACEvC,EAAAmC,QAAAO,cAAA,OAAKC,OAASC,UAAW,QAAUC,UAAWzC,EAAA+B,QAAOW,WACnD9C,EAAAmC,QAAAO,cAACpC,EAAAyC,eAAcrB,OAAQA,EAAQW,YAAaA,EAAaW,QAAS7B,IAElEnB,EAAAmC,QAAAO,cAACpC,EAAA2C,WAAUZ,YAAaA,EAAaD,UAAWA,IAChDpC,EAAAmC,QAAAO,cAACpC,EAAA4C,cAAab,YAAaI,EAAeL,UAAWI,IACrDxC,EAAAmC,QAAAO,cAAA,OAAKS,QAAS,kBAAMV,GAAc,IAAOI,UAAWzC,EAAA+B,QAAOiB,aACzDpD,EAAAmC,QAAAO,cAAA,SAAG1C,EAAAmC,QAAAO,cAACnC,EAAA8C,MAAK,YAMFtC,oCC9CfuC,EAAAC,SAAkBC,cAAA,uDAAAJ,YAAA,qDAAAN,UAAA","file":"p__cards__routes__PipeBoard.33069efe.async.js","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'dva'\r\nimport { Modal, Affix } from 'antd';\r\nimport styles from './PipeBoard.less';\r\nimport { PipeContainer, CardModal, NewCardModal  } from '../components'\r\nimport { ConnectState } from '@/models/connect';\r\nimport { PhaseInterface, ID } from '@/models/database';\r\nimport { MdAdd } from 'react-icons/md';\r\ninterface Props {\r\n  match: {\r\n    params: {\r\n      id: ID;\r\n    }\r\n  }\r\n}\r\n\r\nconst customCompare = (l: Array<any>, r: Array<any>) => {\r\n  return l.filter((e, i) => r[i].order !== e.order) ? false : true\r\n}\r\nconst PipeBoard = (props:Props) => {\r\n  const dispatch = useDispatch()\r\n  const { id } = props.match.params\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: 'pipes/pipeShow',\r\n      payload: {\r\n        path_id: [id],\r\n      },\r\n    })\r\n  }, [])\r\n  const phases: PhaseInterface[] = useSelector((state: ConnectState) => state.pipes.loaded.phases || [], customCompare)\r\n  const [isVisible, toggleModal] = useState(false)\r\n  const [isNewVisible, toggleNewCard] = useState(false)\r\n  return (\r\n    <div style={{ overflowX: 'auto' }} className={styles.scrollBar}>\r\n      <PipeContainer phases={phases} toggleModal={toggleModal} pipe_id={id}/>\r\n      \r\n      <CardModal toggleModal={toggleModal} isVisible={isVisible}/>\r\n      <NewCardModal toggleModal={toggleNewCard} isVisible={isNewVisible}/>\r\n      <div onClick={() => toggleNewCard(true)} className={styles.affixButton}>\r\n        <i><MdAdd/></i>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PipeBoard\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pipeContainer\":\"antd-pro-pages-cards-routes-pipe-board-pipeContainer\",\"affixButton\":\"antd-pro-pages-cards-routes-pipe-board-affixButton\",\"scrollBar\":\"antd-pro-pages-cards-routes-pipe-board-scrollBar\"};"],"sourceRoot":""}