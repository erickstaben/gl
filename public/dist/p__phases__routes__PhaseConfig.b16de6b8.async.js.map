{"version":3,"sources":["src/pages/phases/routes/PhaseConfig.tsx"],"names":["_react","_interopRequireWildcard","__webpack_require__","_dva","_PhaseConfig","_interopRequireDefault","_reactHookForm","_PhaseForm","PhaseConfig","props","dispatch","useDispatch","id","match","params","useEffect","reset","type","payload","path_id","onSubmit","data","body","config","saving","useSelector","state","loading","effects","phases","loaded","_useForm","default","register","handleSubmit","errors","setValue","setError","name","createElement","_spin","spinning","className","configContainer","editing","values","pipe_id","submit"],"mappings":"+NAAAA,EAAAC,EAAAC,EAAA,SACAC,EAAAD,EAAA,QAEAE,EAAAC,EAAAH,EAAA,SAGAI,EAAAD,EAAAH,EAAA,SAGAK,EAAAF,EAAAH,EAAA,SASMM,EAAc,SAACC,GACjB,IAAMC,GAAW,EAAAP,EAAAQ,eACTC,EAAOH,EAAMI,MAAMC,OAAnBF,IAER,EAAAZ,EAAAe,WAAU,WACNC,IACAN,GACIO,KAAM,qBACNC,SACIC,SAAUP,QAGnBA,IACH,IAAMQ,EAAW,SAACC,GACdX,GACIO,KAAM,gBACNC,SACII,KAAMD,EACNF,SAAUI,EAAOX,QAIvBY,GAAS,EAAArB,EAAAsB,aAAY,SAACC,GAAD,OAAeA,EAAMC,QAAQC,QAAQ,mBAC1DD,GAAU,EAAAxB,EAAAsB,aAAY,SAACC,GAAD,OAAeA,EAAMC,QAAQC,QAAQ,wBAC3DL,GAAS,EAAApB,EAAAsB,aAAY,SAACC,GAAD,OAAeA,EAAMG,OAAOC,OAAOP,SAxB9BQ,GAyBsC,EAAAzB,EAAA0B,WAA9DC,EAzBwBF,EAyBxBE,SAAoDjB,GAzB5Be,EAyBdG,aAzBcH,EAyBAI,OAzBAJ,EAyBQK,SAzBRL,EAyBkBM,SAzBlBN,EAyB4Bf,OAM5D,OALA,EAAAhB,EAAAe,WAAU,WACNkB,GAAWK,KAAM,gBACjBL,GAAWK,KAAM,aACjBL,GAAWK,KAAM,iBAGjBtC,EAAAgC,QAAAO,cAAAC,EAAAR,SAAMS,SAAUjB,GAAUG,IAAW,EAAOe,UAAWtC,EAAA4B,QAAOW,iBAC1D3C,EAAAgC,QAAAO,cAAChC,EAAAyB,SAAUY,SAAS,EAAOC,OAAQtB,EAAQuB,QAASvB,EAAOuB,QAASC,OAAQ3B,QAKzEZ","file":"p__phases__routes__PhaseConfig.b16de6b8.async.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'dva'\r\nimport { ID } from '@/models/database'\r\nimport styles from './PhaseConfig.less'\r\nimport { Row, Spin, Switch  } from 'antd';\r\nimport { FormListPreview } from '@/pages/cards/components';\r\nimport useForm from 'react-hook-form';\r\nimport { PhaseInterface } from '@/models/database'\r\nimport { ReorderComponent } from '../../cards/components';\r\nimport PhaseForm from '@/pages/cards/components/PhaseLane/PhaseForm';\r\n\r\ninterface Props {\r\n    match: {\r\n        params: {\r\n            id: ID;\r\n        }\r\n    }\r\n}\r\nconst PhaseConfig = (props:Props) => {\r\n    const dispatch = useDispatch()\r\n    const { id } = props.match.params\r\n\r\n    useEffect(() => {\r\n        reset()\r\n        dispatch({\r\n            type: 'phases/phaseConfig',\r\n            payload: {\r\n                path_id: [id]\r\n            }\r\n        })\r\n    },[id])    \r\n    const onSubmit = (data: any) => {\r\n        dispatch({\r\n            type: 'phases/update',\r\n            payload: {\r\n                body: data,\r\n                path_id: [config.id]\r\n            }\r\n        })\r\n    };\r\n    const saving = useSelector((state:any) => state.loading.effects['phases/update'])\r\n    const loading = useSelector((state:any) => state.loading.effects['phases/phaseConfig'])\r\n    const config = useSelector((state:any) => state.phases.loaded.config)\r\n    const { register, handleSubmit, errors, setValue, setError, reset } = useForm();\r\n    useEffect(() => {\r\n        register({ name: \"phaseFields\" })\r\n        register({ name: \"is_final\" })\r\n        register({ name: \"extends\" })\r\n    },[])\r\n    return (\r\n        <Spin spinning={saving || loading || false} className={styles.configContainer}>\r\n            <PhaseForm editing={false} values={config} pipe_id={config.pipe_id} submit={onSubmit}/>\r\n        </Spin>\r\n    )\r\n}\r\n\r\nexport default PhaseConfig"],"sourceRoot":""}