{"version":3,"sources":["webpack:///./src/pages/cards/routes/PipeConfig.less?be28","src/pages/cards/routes/PipeConfig.tsx"],"names":["module","exports","formInput","saveButton","_react","_interopRequireWildcard","__webpack_require__","_dva","_PipeConfig","_interopRequireDefault","_reactHookForm","TabPane","PipeConfig","props","cardsColumns","title","dataIndex","key","render","text","record","default","createElement","onClick","openCardModal","id","_divider","type","_popconfirm","onConfirm","handleDeleteCard","usersColumns","openUserModal","handleDeleteUser","match","params","dispatch","useDispatch","useEffect","payload","path_id","load","recurrentCard","recurrentCards","filter","card","setCardModalVisible","setRecurrentCard","user","users","setUserModalVisible","setUser","allUsers","useSelector","state","list","allCompanies","companies","pipes","loaded","recurrent_cards","_useForm","register","handleSubmit","_useState","errors","setValue","setError","reset","useState","_useState2","_slicedToArray2","_useState3","_useState4","_useState5","_useState6","userModalVisible","_useState7","_useState8","cardModalVisible","name","saving","loading","effects","handleRecurrentCardSubmit","data","newData","_objectSpread2","body","handlePipeUserSubmit","console","log","_row","_tabs","defaultActiveKey","tab","_table","dataSource","columns","_modal","onCancel","footer","visible","_spin","spinning","company","onSubmit","className","defaultValue","ref","map","value","due_date"],"mappings":"sFACAA,EAAAC,SAAkBC,UAAA,oDAAAC,WAAA,gaCDlBC,EAAAC,EAAAC,EAAA,SACAC,EAAAD,EAAA,QAEAE,EAAAC,EAAAH,EAAA,SACAI,EAAAD,EAAAH,EAAA,SAEOK,oBACDC,EAAa,SAACC,GAGhB,IAAMC,IACFC,MAAO,UACPC,UAAW,eACXC,IAAK,eAELF,MAAO,iBACPC,UAAW,YACXC,IAAK,YAELF,MAAO,oBACPC,UAAW,WACXC,IAAK,aAELF,MAAO,cACPC,UAAW,YACXE,OAAQ,SAACC,EAAMC,GAAP,OACRhB,EAAAiB,QAAAC,cAAA,YACIlB,EAAAiB,QAAAC,cAAA,KAAGC,QAAS,kBAAMC,EAAcJ,EAAOK,MAAG,UAC1CrB,EAAAiB,QAAAC,cAAAI,EAAAL,SAASM,KAAK,aACdvB,EAAAiB,QAAAC,cAAAM,EAAAP,SAAYN,MAAM,kBAAkBc,UAAW,kBAAMC,EAAiBV,EAAOK,MACzErB,EAAAiB,QAAAC,cAAA,wBAKNS,IACFhB,MAAO,aACPC,UAAW,OACXC,IAAK,OAELF,MAAO,WACPC,UAAW,oBACXC,IAAK,sBAELF,MAAO,cACPC,UAAW,YACXE,OAAQ,SAACC,EAAMC,GAAP,OACRhB,EAAAiB,QAAAC,cAAA,YACIlB,EAAAiB,QAAAC,cAAA,KAAGC,QAAS,kBAAMS,EAAcZ,EAAOK,MAAG,UAC1CrB,EAAAiB,QAAAC,cAAAI,EAAAL,SAASM,KAAK,aACdvB,EAAAiB,QAAAC,cAAAM,EAAAP,SAAYN,MAAM,kBAAkBc,UAAW,kBAAMI,EAAiBb,EAAOK,MACzErB,EAAAiB,QAAAC,cAAA,wBAMJG,EAAOZ,EAAMqB,MAAMC,OAAnBV,GACFW,GAAW,EAAA7B,EAAA8B,gBACjB,EAAAjC,EAAAkC,WAAU,WACNF,GACIT,KAAM,iBACNY,SACIC,SAAUf,GACVU,QACIM,MAAO,iBAAiB,eAIpChB,IAEJ,IAAMQ,EAAmB,SAAChB,GACtBmB,GACIT,KAAM,mBACNY,SACIC,SAAUf,EAAGR,MAGrBmB,GACIT,KAAM,iBACNY,SACIC,SAAUf,GACVU,QACIM,MAAO,iBAAiB,cAMlCX,EAAmB,SAACb,GACtBmB,GACIT,KAAM,4BACNY,SACIC,SAAUf,EAAGR,MAGrBmB,GACIT,KAAM,iBACNY,SACIC,SAAUf,GACVU,QACIM,MAAO,iBAAiB,cAMlCjB,EAAgB,SAACP,GACnBmB,GACIT,KAAM,cACNY,aAEJH,GACIT,KAAM,kBACNY,aAEJ,IAAMG,EAAgBC,EAAeC,OAAO,SAAAC,GAAI,OAAIA,EAAKpB,IAAMR,IAAK,GACpE6B,GAAoB,GACpBC,EAAiBL,IAEfV,EAAgB,SAACf,GACnBmB,GACIT,KAAM,cACNY,aAEJ,IAAMS,EAAOC,EAAML,OAAO,SAAAI,GAAI,OAAIA,EAAKvB,IAAMR,IAAK,GAClDiC,GAAoB,GACpBC,EAAQH,IAINI,GAAW,EAAA7C,EAAA8C,aAAY,SAACC,GAAD,OAAeA,EAAML,MAAMM,OAClDC,GAAe,EAAAjD,EAAA8C,aAAY,SAACC,GAAD,OAAeA,EAAMG,UAAUF,OAG1DZ,GAAiB,EAAApC,EAAA8C,aAAY,SAACC,GAAD,OAAeA,EAAMI,MAAMC,OAAOC,kBAC/DX,GAAQ,EAAA1C,EAAA8C,aAAY,SAACC,GAAD,OAAeA,EAAMI,MAAMC,OAAOV,QAjI/BY,GAkIyC,EAAAnD,EAAAW,WAA9DyC,EAlIqBD,EAkIrBC,SAAUC,EAlIWF,EAkIXE,aAlIWC,GAAAH,EAkIGI,OAlIHJ,EAkIWK,SAlIXL,EAkIqBM,SAlIrBN,EAkI+BO,OACnB,EAAAhE,EAAAiE,eAnIZC,GAAA,EAAAC,EAAAlD,SAAA2C,EAAA,GAmItBtB,EAnIsB4B,EAAA,GAmIRvB,EAnIQuB,EAAA,GAAAE,GAoIN,EAAApE,EAAAiE,cApIMI,GAAA,EAAAF,EAAAlD,SAAAmD,EAAA,GAoItBxB,EApIsByB,EAAA,GAoIjBtB,EApIiBsB,EAAA,GAAAC,GAqIkB,EAAAtE,EAAAiE,WAAS,GArI3BM,GAAA,EAAAJ,EAAAlD,SAAAqD,EAAA,GAqItBE,EArIsBD,EAAA,GAqILzB,EArIKyB,EAAA,GAAAE,GAsIkB,EAAAzE,EAAAiE,WAAS,GAtI3BS,GAAA,EAAAP,EAAAlD,SAAAwD,EAAA,GAsItBE,EAtIsBD,EAAA,GAsILhC,EAtIKgC,EAAA,IAuI7B,EAAA1E,EAAAkC,WAAU,WACNwB,GAAWkB,KAAM,gBACjBlB,GAAWkB,KAAM,kBAErB,IAAMC,GAAS,EAAA1E,EAAA8C,aAAY,SAAAC,GAAK,OAAIA,EAAM4B,QAAQC,QAAQ,6BAEpDC,EAA6B,SAACC,GAChC,IAAMC,GAAO,EAAAC,EAAAlE,YACNgE,GACH5D,GAAIiB,EAAcjB,IAAM,OAE5BW,GACIT,KAAM,0BACNY,SACIC,SAAUf,GACV+D,KAAMF,KAGdxC,GAAoB,IAElB2C,EAAwB,SAACJ,GAC3B,IAAMC,GAAO,EAAAC,EAAAlE,YACNgE,GACH5D,GAAIuB,EAAKvB,IAAM,OAEnBW,GACIT,KAAM,qBACNY,SACIC,SAAUf,GACV+D,KAAMF,KAGdpC,GAAoB,IAGxB,OADAwC,QAAQC,IAAIV,EAAOvC,GAEftC,EAAAiB,QAAAC,cAAAsE,EAAAvE,QAAI,KACAjB,EAAAiB,QAAAC,cAAAuE,EAAAxE,SAAMyE,iBAAiB,KACnB1F,EAAAiB,QAAAC,cAACX,GAAQoF,IAAI,oBAAoB9E,IAAI,KACjCb,EAAAiB,QAAAC,cAAA0E,EAAA3E,SAAO4E,WAAYtD,EAAgBuD,QAASpF,KAEhDV,EAAAiB,QAAAC,cAACX,GAAQoF,IAAI,cAAW9E,IAAI,KACxBb,EAAAiB,QAAAC,cAAA0E,EAAA3E,SAAO4E,WAAYhD,EAAOiD,QAASnE,MAG1CgD,GAAoB3E,EAAAiB,QAAAC,cAAA6E,EAAA9E,SAAO+E,SAAU,kBAAMtD,GAAoB,IAAQuD,OAAQ,KAAMC,QAASvB,GAC3F3E,EAAAiB,QAAAC,cAAAiF,EAAAlF,SAAMmF,UAAW9D,GAAiBuC,IAAU,GACvCvC,EAAc+D,SAAWrG,EAAAiB,QAAAC,cAAA,QAAMoF,SAAU3C,EAAaqB,IACnDhF,EAAAiB,QAAAC,cAAAsE,EAAAvE,QAAI,KACAjB,EAAAiB,QAAAC,cAAA,OAAKqF,UAAWnG,EAAAa,QAAOnB,WACnBE,EAAAiB,QAAAC,cAAA,uCACAlB,EAAAiB,QAAAC,cAAA,UAAQsF,aAAclE,EAAc+D,QAAQhF,GAAIuD,KAAK,aAAa6B,IAAK/C,GAClEN,EAAeA,EAAasD,IAAI,SAAAL,GAAO,OAAIrG,EAAAiB,QAAAC,cAAA,UAAQL,IAAKwF,EAAQhF,GAAIsF,MAAON,EAAQhF,IAAKgF,EAAQzB,QAAiB,mBAI9H5E,EAAAiB,QAAAC,cAAAsE,EAAAvE,QAAI,KACAjB,EAAAiB,QAAAC,cAAA,OAAKqF,UAAWnG,EAAAa,QAAOnB,WACnBE,EAAAiB,QAAAC,cAAA,yCACAlB,EAAAiB,QAAAC,cAAA,UAAQsF,aAAclE,EAAcM,KAAKvB,GAAIuD,KAAK,UAAU6B,IAAK/C,GAC5DV,EAAWA,EAAS0D,IAAI,SAAA9D,GAAI,OAAI5C,EAAAiB,QAAAC,cAAA,UAAQL,IAAK+B,EAAKvB,GAAIsF,MAAO/D,EAAKvB,IAAKuB,EAAKgC,QAAiB,mBAI1G5E,EAAAiB,QAAAC,cAAAsE,EAAAvE,QAAI,KACAjB,EAAAiB,QAAAC,cAAA,OAAKqF,UAAWnG,EAAAa,QAAOnB,WACnBE,EAAAiB,QAAAC,cAAA,sCACAlB,EAAAiB,QAAAC,cAAA,SAAOsF,aAAclE,EAAcsE,SAAUhC,KAAK,WAAW6B,IAAK/C,MAG1E1D,EAAAiB,QAAAC,cAAAsE,EAAAvE,QAAI,KACAjB,EAAAiB,QAAAC,cAAA,UAAQK,KAAK,SAASgF,UAAWnG,EAAAa,QAAOlB,YAAU,cAKjEyE,GAAoBxE,EAAAiB,QAAAC,cAAA6E,EAAA9E,SAAO+E,SAAU,kBAAMlD,GAAoB,IAAQmD,OAAQ,KAAMC,QAAS1B,GAC3FxE,EAAAiB,QAAAC,cAAAiF,EAAAlF,SAAMmF,UAAWxD,GAAQiC,IAAU,GAC9BjC,EAAKvB,IAAMrB,EAAAiB,QAAAC,cAAA,QAAMoF,SAAU3C,EAAa0B,IACrCrF,EAAAiB,QAAAC,cAAAsE,EAAAvE,QAAI,KACAjB,EAAAiB,QAAAC,cAAA,OAAKqF,UAAWnG,EAAAa,QAAOnB,WACnBE,EAAAiB,QAAAC,cAAA,yCACAlB,EAAAiB,QAAAC,cAAA,UAAQsF,aAAc5D,EAAKvB,GAAIuD,KAAK,UAAU6B,IAAK/C,GAC9CV,EAAWA,EAAS0D,IAAI,SAAA9D,GAAI,OAAI5C,EAAAiB,QAAAC,cAAA,UAAQL,IAAK+B,EAAKvB,GAAIsF,MAAO/D,EAAKvB,IAAKuB,EAAKgC,QAAiB,mBAI1G5E,EAAAiB,QAAAC,cAAAsE,EAAAvE,QAAI,KACAjB,EAAAiB,QAAAC,cAAA,UAAQK,KAAK,SAASgF,UAAWnG,EAAAa,QAAOlB,YAAU,kBAU/DS","file":"p__cards__routes__PipeConfig.045d0cd2.async.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"antd-pro-pages-cards-routes-pipe-config-formInput\",\"saveButton\":\"antd-pro-pages-cards-routes-pipe-config-saveButton\"};","import React, {useEffect, useState} from 'react';\r\nimport { useDispatch, useSelector } from 'dva';\r\nimport { Row, Col, Table,Tabs, Popconfirm ,Divider,Modal, Spin } from 'antd';\r\nimport styles from './PipeConfig.less'\r\nimport useForm from 'react-hook-form';\r\n\r\nconst {TabPane} = Tabs\r\nconst PipeConfig = (props:any) => {\r\n    \r\n      \r\n    const cardsColumns = [{\r\n        title: 'Empresa',\r\n        dataIndex: 'company.name',\r\n        key: 'company.id',\r\n    },{\r\n        title: 'Responsável',\r\n        dataIndex: 'user.name',\r\n        key: 'user.id',\r\n    },{\r\n        title: 'Dia de vencimento',\r\n        dataIndex: 'due_date',\r\n        key: 'due_date',\r\n    },{\r\n        title: 'Ações',\r\n        dataIndex: 'operation',\r\n        render: (text, record) =>\r\n        <span>\r\n            <a onClick={() => openCardModal(record.id)}>Editar</a>\r\n            <Divider type='vertical'/>\r\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDeleteCard(record.id)}>\r\n                <a>Delete</a>\r\n            </Popconfirm>\r\n        </span>,\r\n    }];\r\n\r\n    const usersColumns = [{\r\n        title: 'Usuário',\r\n        dataIndex: 'name',\r\n        key: 'id',\r\n    },{\r\n        title: 'Favorito',\r\n        dataIndex: 'pivot.is_favorite',\r\n        key: 'pivot.is_favorite',\r\n    },{\r\n        title: 'Ações',\r\n        dataIndex: 'operation',\r\n        render: (text, record) =>\r\n        <span>\r\n            <a onClick={() => openUserModal(record.id)}>Editar</a>\r\n            <Divider type='vertical'/>\r\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDeleteUser(record.id)}>\r\n                <a>Delete</a>\r\n            </Popconfirm>\r\n        </span>,\r\n    }];\r\n\r\n\r\n    const { id } = props.match.params\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch({\r\n            type: 'pipes/pipeShow',\r\n            payload: {\r\n                path_id: [id],\r\n                params: {\r\n                    load: ['recurrentCards','users'],\r\n                }\r\n            },\r\n        })\r\n    }, [id])\r\n\r\n    const handleDeleteUser = (key:number) => {\r\n        dispatch({\r\n            type: 'pipes/deleteUser',\r\n            payload: {\r\n                path_id: [id,key],\r\n            },\r\n        })\r\n        dispatch({\r\n            type: 'pipes/pipeShow',\r\n            payload: {\r\n                path_id: [id],\r\n                params: {\r\n                    load: ['recurrentCards','users'],\r\n                }\r\n            },\r\n        })\r\n    }\r\n\r\n    const handleDeleteCard = (key:number) => {\r\n        dispatch({\r\n            type: 'pipes/deleteRecurrentCard',\r\n            payload: {\r\n                path_id: [id,key],\r\n            },\r\n        })\r\n        dispatch({\r\n            type: 'pipes/pipeShow',\r\n            payload: {\r\n                path_id: [id],\r\n                params: {\r\n                    load: ['recurrentCards','users'],\r\n                }\r\n            },\r\n        })\r\n    }\r\n\r\n    const openCardModal = (key) => {\r\n        dispatch({\r\n            type: 'users/index',\r\n            payload: {},\r\n        })\r\n        dispatch({\r\n            type: 'companies/index',\r\n            payload: {},\r\n        })\r\n        const recurrentCard = recurrentCards.filter(card => card.id == key)[0]\r\n        setCardModalVisible(true)\r\n        setRecurrentCard(recurrentCard)\r\n    }\r\n    const openUserModal = (key) => {\r\n        dispatch({\r\n            type: 'users/index',\r\n            payload: {},\r\n        })\r\n        const user = users.filter(user => user.id == key)[0]\r\n        setUserModalVisible(true)\r\n        setUser(user)\r\n    }\r\n\r\n\r\n    const allUsers = useSelector((state:any) => state.users.list)\r\n    const allCompanies = useSelector((state:any) => state.companies.list)\r\n\r\n\r\n    const recurrentCards = useSelector((state:any) => state.pipes.loaded.recurrent_cards)\r\n    const users = useSelector((state:any) => state.pipes.loaded.users)\r\n    const { register, handleSubmit, errors, setValue, setError, reset } = useForm();\r\n    const [recurrentCard,setRecurrentCard] = useState({})\r\n    const [user,setUser] = useState({})\r\n    const [userModalVisible,setUserModalVisible] = useState(false)    \r\n    const [cardModalVisible,setCardModalVisible] = useState(false)\r\n    useEffect(() => {\r\n        register({ name: \"phaseFields\" })\r\n        register({ name: \"is_final\" })\r\n    },[])\r\n    const saving = useSelector(state => state.loading.effects['pipes/saveRecurrentCard'])\r\n\r\n    const handleRecurrentCardSubmit  = (data) => {\r\n        const newData = {\r\n            ...data,\r\n            id: recurrentCard.id || null\r\n        }\r\n        dispatch({\r\n            type: 'pipes/saveRecurrentCard',\r\n            payload: {\r\n                path_id: [id],\r\n                body: newData,\r\n            }\r\n        })\r\n        setCardModalVisible(false)\r\n    }\r\n    const handlePipeUserSubmit  = (data) => {\r\n        const newData = {\r\n            ...data,\r\n            id: user.id || null\r\n        }\r\n        dispatch({\r\n            type: 'pipes/savePipeUser',\r\n            payload: {\r\n                path_id: [id],\r\n                body: newData,\r\n            }\r\n        })\r\n        setUserModalVisible(false)\r\n    }\r\n    console.log(saving,recurrentCard)\r\n    return (\r\n        <Row>\r\n            <Tabs defaultActiveKey=\"1\" >\r\n                <TabPane tab=\"Cards recorrentes\" key=\"1\">\r\n                    <Table dataSource={recurrentCards} columns={cardsColumns} />\r\n                </TabPane>\r\n                <TabPane tab=\"Usuários\" key=\"2\">\r\n                    <Table dataSource={users} columns={usersColumns} />\r\n                </TabPane>\r\n            </Tabs>\r\n            {cardModalVisible && <Modal onCancel={() => setCardModalVisible(false)} footer={null} visible={cardModalVisible}>\r\n                <Spin spinning={!recurrentCard || saving || false}>\r\n                    {recurrentCard.company && <form onSubmit={handleSubmit(handleRecurrentCardSubmit)}>\r\n                        <Row>\r\n                            <div className={styles.formInput}>\r\n                                <label>Selecione uma empresa:</label>\r\n                                <select defaultValue={recurrentCard.company.id} name='company_id' ref={register}>\r\n                                    {allCompanies ? allCompanies.map(company => <option key={company.id} value={company.id}>{company.name}</option>): 'Carregando...'}\r\n                                </select>\r\n                            </div>\r\n                        </Row>\r\n                        <Row>\r\n                            <div className={styles.formInput}>\r\n                                <label>Selecione um usuário:</label>\r\n                                <select defaultValue={recurrentCard.user.id} name='user_id' ref={register}>\r\n                                    {allUsers ? allUsers.map(user => <option key={user.id} value={user.id}>{user.name}</option>): 'Carregando...'}\r\n                                </select>\r\n                            </div>\r\n                        </Row>\r\n                        <Row>\r\n                            <div className={styles.formInput}>\r\n                                <label>Dia limite do mês:</label>\r\n                                <input defaultValue={recurrentCard.due_date} name='due_date' ref={register}/>\r\n                            </div>\r\n                        </Row>\r\n                        <Row>\r\n                            <button type='submit' className={styles.saveButton}>Salvar</button>\r\n                        </Row>\r\n                    </form>}\r\n                </Spin>\r\n            </Modal>}\r\n            {userModalVisible && <Modal onCancel={() => setUserModalVisible(false)} footer={null} visible={userModalVisible}>\r\n                <Spin spinning={!user || saving || false}>\r\n                    {user.id && <form onSubmit={handleSubmit(handlePipeUserSubmit)}>                        \r\n                        <Row>\r\n                            <div className={styles.formInput}>\r\n                                <label>Selecione um usuário:</label>\r\n                                <select defaultValue={user.id} name='user_id' ref={register}>\r\n                                    {allUsers ? allUsers.map(user => <option key={user.id} value={user.id}>{user.name}</option>): 'Carregando...'}\r\n                                </select>\r\n                            </div>\r\n                        </Row>\r\n                        <Row>\r\n                            <button type='submit' className={styles.saveButton}>Salvar</button>\r\n                        </Row>\r\n                    </form>}\r\n                </Spin>\r\n            </Modal>}\r\n        </Row>\r\n    )\r\n}\r\n        \r\n\r\nexport default PipeConfig\r\n"],"sourceRoot":""}